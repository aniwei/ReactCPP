#pragma once

// Auto-generated by scripts/translate-react.js
// Source: reactjs/packages/react-reconciler/src/ReactFiberNewContext.js

#include "ReactReconciler/ReactFiberLane.h"

#include "jsi/jsi.h"

namespace react {

struct FiberNode;

void resetContextDependencies();
void enterDisallowedContextReadInDEV();
void exitDisallowedContextReadInDEV();
void prepareToReadContext(FiberNode& workInProgress, Lanes renderLanes);
void pushProvider(
    facebook::jsi::Runtime& runtime,
    FiberNode& providerFiber,
    const facebook::jsi::Value& contextValue,
    const facebook::jsi::Value& nextValue);
void popProvider(
    facebook::jsi::Runtime& runtime,
    FiberNode& providerFiber,
    const facebook::jsi::Value& contextValue);
facebook::jsi::Value readContextDuringReconciliation(
    facebook::jsi::Runtime& runtime,
    FiberNode& consumer,
    const facebook::jsi::Value& contextValue,
    Lanes renderLanes);
facebook::jsi::Value readContext(
    facebook::jsi::Runtime& runtime,
    FiberNode& consumer,
    const facebook::jsi::Value& contextValue);
void* cloneContextDependencies(void* head);
void deleteContextDependencies(void* head);
void scheduleContextWorkOnParentPath(FiberNode* parent, Lanes renderLanes, FiberNode& propagationRoot);
void propagateContextChange(
    facebook::jsi::Runtime& runtime,
    FiberNode& workInProgress,
    const facebook::jsi::Value& contextValue,
    Lanes renderLanes);
void lazilyPropagateParentContextChanges(
    facebook::jsi::Runtime& runtime,
    FiberNode& current,
    FiberNode& workInProgress,
    Lanes renderLanes);
void propagateParentContextChangesToDeferredTree(
    facebook::jsi::Runtime& runtime,
    FiberNode& current,
    FiberNode& workInProgress,
    Lanes renderLanes);
bool checkIfContextChanged(const FiberNode::Dependencies& currentDependencies);

} // namespace react
