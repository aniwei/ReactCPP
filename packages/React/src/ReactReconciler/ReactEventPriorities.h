#pragma once

// Auto-generated by scripts/translate-react.js
// Source: reactjs/packages/react-reconciler/src/ReactEventPriorities.js

#include "ReactReconciler/ReactFiberLane.h"

namespace react {

using EventPriority = Lane;

inline constexpr EventPriority NoEventPriority = NoLane;
inline constexpr EventPriority DiscreteEventPriority = SyncLane;
inline constexpr EventPriority ContinuousEventPriority = InputContinuousLane;
inline constexpr EventPriority DefaultEventPriority = DefaultLane;
inline constexpr EventPriority IdleEventPriority = IdleLane;

inline constexpr EventPriority higherEventPriority(EventPriority a, EventPriority b) {
  return (a != 0 && a < b) ? a : b;
}

inline constexpr EventPriority lowerEventPriority(EventPriority a, EventPriority b) {
  return (a == 0 || a > b) ? a : b;
}

inline constexpr bool isHigherEventPriority(EventPriority a, EventPriority b) {
  return a != 0 && a < b;
}

inline constexpr Lane eventPriorityToLane(EventPriority priority) {
  return priority;
}

inline EventPriority lanesToEventPriority(Lanes lanes) {
  const Lane lane = getHighestPriorityLane(lanes);
  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
    return DiscreteEventPriority;
  }
  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
    return ContinuousEventPriority;
  }
  if (includesNonIdleWork(lane)) {
    return DefaultEventPriority;
  }
  return IdleEventPriority;
}

} // namespace react
